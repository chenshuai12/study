###### Redis配置  ########
# Redis数据库索引（默认为0）
spring.redis.database=0
# Redis服务器地址
spring.redis.host=192.168.2.128
# Redis服务器连接端口
spring.redis.port=6379
# Redis服务器连接密码
#spring.redis.password=123456
# 连接超时时间
spring.redis.timeout=3000
#########  Redis线程池设置 ####
# 连接池最大连接数（使用负值表示没有限制，默认为8）
spring.redis.lettuce.pool.max-active=8
# 连接池最大阻塞等待时间（使用负值表示没有限制，默认-1）
spring.redis.lettuce.pool.max-wait=-1
# 连接池中最大空闲连接，默认8
spring.redis.lettuce.pool.max-idle=8
# 连接池最小空闲连接 默认0
spring.redis.lettuce.pool.min-idle=0




#说明映射文件的位置（一般是在src/main/resources/mapper下）
mybatis.mapper-locations=classpath:mapper/*.xml
#给bean包下的类起别名，一般不推荐起别名
#mybatis.type-aliases-package=com.example.mybatis.bean
server.port=80
# 设置数据源
spring.shardingsphere.datasource.names=db0,db1

# db0的基本信息 这里的db0要和上面的配置要保持一直
spring.shardingsphere.datasource.db0.url=jdbc:mysql://192.168.2.128:3306/db0?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&failOverReadOnly=false&maxReconnects=15000&allowMultiQueries=true&useSSL=false
spring.shardingsphere.datasource.db0.username=root
spring.shardingsphere.datasource.db0.password=Lc@2323994483
spring.shardingsphere.datasource.db0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.db0.driver-class-name=com.mysql.jdbc.Driver

# db1的基本信息 这里的db1要和上面的配置要保持一直
spring.shardingsphere.datasource.db1.url=jdbc:mysql://192.168.2.128:3306/db1?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&failOverReadOnly=false&maxReconnects=15000&allowMultiQueries=true&useSSL=false
spring.shardingsphere.datasource.db1.username=root
spring.shardingsphere.datasource.db1.password=Lc@2323994483
spring.shardingsphere.datasource.db1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.db1.driver-class-name=com.mysql.jdbc.Driver

# 设置数据库分库的表达式
spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=db$->{shop_id % 2}
spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=shop_id

# 指定分表的规则
# db$->{0..1}指明库的取值范围 db0和db1 会根据上面给定的规则，计算出库名 如果没有传递shop_id 这里会报错
# product_info$->{0..1}指明了表的取值范围product_info0和product_info1;会根据下面给的运输规则$->{product_id % 2 + 1}得到
spring.shardingsphere.sharding.tables.product_info.actual-data-nodes=db$->{0..1}.product_info$->{1..2}
spring.shardingsphere.sharding.tables.product_info.key-generator.column=product_id
spring.shardingsphere.sharding.tables.product_info.key-generator.type=SNOWFLAKE
spring.shardingsphere.sharding.tables.product_info.table-strategy.inline.algorithm-expression=product_info$->{product_id % 2 + 1}
spring.shardingsphere.sharding.tables.product_info.table-strategy.inline.sharding-column=product_id

spring.shardingsphere.sharding.tables.shop_info.actual-data-nodes=db$->{0..1}.shop_info$->{1..2}
spring.shardingsphere.sharding.tables.shop_info.key-generator.column=shop_id
spring.shardingsphere.sharding.tables.shop_info.key-generator.type=SNOWFLAKE
spring.shardingsphere.sharding.tables.shop_info.table-strategy.inline.algorithm-expression=shop_info$->{shop_type % 2 + 1}
spring.shardingsphere.sharding.tables.shop_info.table-strategy.inline.sharding-column=shop_type

# 用户表，这里不进行分库，直接将数据保存在db0中
spring.shardingsphere.sharding.tables.user_info.actual-data-nodes=db0.user_info$->{0..1}
spring.shardingsphere.sharding.tables.user_info.key-generator.column=user_id
spring.shardingsphere.sharding.tables.user_info.key-generator.type=SNOWFLAKE
spring.shardingsphere.sharding.tables.user_info.table-strategy.inline.algorithm-expression=user_info$->{user_id % 2 + 1}
spring.shardingsphere.sharding.tables.user_info.table-strategy.inline.sharding-column=user_id

## 指明广播表 公共表
spring.shardingsphere.sharding.broadcast-tables=shop_type_info

spring.shardingsphere.props.sql.show=true

##actuator
management.security.enabled=false
management.endpoints.web.exposure.include=*



